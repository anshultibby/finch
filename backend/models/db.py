"""
SQLAlchemy database models
"""
from sqlalchemy import Column, String, DateTime, Text, Boolean
from sqlalchemy.sql import func
from database import Base


class SnapTradeUser(Base):
    """
    Stores SnapTrade user connections per session
    
    SnapTrade handles OAuth authentication, but we need to store the userSecret
    that SnapTrade generates for each user so we can make API calls on their behalf.
    
    SECURITY:
    - userSecret is sensitive and should be treated like a password
    - OAuth flow handled by SnapTrade
    - We store user_id, userSecret, and account references
    """
    __tablename__ = "snaptrade_users"
    
    # Primary key (our session ID)
    session_id = Column(String, primary_key=True, index=True)
    
    # SnapTrade user ID (returned after registering user with SnapTrade)
    snaptrade_user_id = Column(String, unique=True, nullable=False, index=True)
    
    # SnapTrade user secret (generated by SnapTrade, needed for all API calls)
    snaptrade_user_secret = Column(Text, nullable=False)
    
    # SnapTrade account IDs (JSON array of connected account IDs)
    # Stored as comma-separated string for simplicity
    connected_account_ids = Column(Text, nullable=True)
    
    # Connection metadata
    is_connected = Column(Boolean, default=False, nullable=False)
    brokerage_name = Column(String, nullable=True)  # e.g., "Robinhood", "TD Ameritrade"
    
    # Session tracking
    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    last_activity = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)
    
    def __repr__(self):
        return f"<SnapTradeUser(session_id='{self.session_id}', snaptrade_user_id='{self.snaptrade_user_id}', is_connected={self.is_connected})>"

